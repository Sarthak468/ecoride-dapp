{"ast":null,"code":"// web3.js\nimport Web3 from \"web3\";\nimport RideSharingABI from \"./RideSharing.json\"; // Ensure path is correct\n\n// Create a web3 instance using window.ethereum for transactions\nconst web3 = new Web3(window.ethereum);\n\n// Create a separate web3 instance using a WebSocket provider for event subscriptions\nconst wsProvider = new Web3.providers.WebsocketProvider(\"ws://127.0.0.1:7545\"); // Make sure your node supports WS (e.g., ganache --ws)\nconst web3Ws = new Web3(wsProvider);\n\n// Replace with your deployed contract address\nconst contractAddress = \"0x795B54B52AE2C7E26d49033Ab788F917B3DFb236\";\n\n// Create two contract instances:\n// 1. For sending transactions (using window.ethereum)\nconst rideSharingContract = new web3.eth.Contract(RideSharingABI.abi, contractAddress);\n\n// 2. For subscribing to events (using WebSocket)\nconst rideSharingContractWs = new web3Ws.eth.Contract(RideSharingABI.abi, contractAddress);\nconsole.log(\"Transaction contract instance:\", rideSharingContract);\nconsole.log(\"WebSocket contract instance:\", rideSharingContractWs);\nexport { web3, web3Ws, rideSharingContract, rideSharingContractWs };","map":{"version":3,"names":["Web3","RideSharingABI","web3","window","ethereum","wsProvider","providers","WebsocketProvider","web3Ws","contractAddress","rideSharingContract","eth","Contract","abi","rideSharingContractWs","console","log"],"sources":["C:/Users/barot/OneDrive/Desktop/EcoRide/frontend/src/web3.js"],"sourcesContent":["// web3.js\r\nimport Web3 from \"web3\";\r\nimport RideSharingABI from \"./RideSharing.json\"; // Ensure path is correct\r\n\r\n// Create a web3 instance using window.ethereum for transactions\r\nconst web3 = new Web3(window.ethereum);\r\n\r\n// Create a separate web3 instance using a WebSocket provider for event subscriptions\r\nconst wsProvider = new Web3.providers.WebsocketProvider(\"ws://127.0.0.1:7545\"); // Make sure your node supports WS (e.g., ganache --ws)\r\nconst web3Ws = new Web3(wsProvider);\r\n\r\n// Replace with your deployed contract address\r\nconst contractAddress = \"0x795B54B52AE2C7E26d49033Ab788F917B3DFb236\";\r\n\r\n// Create two contract instances:\r\n// 1. For sending transactions (using window.ethereum)\r\nconst rideSharingContract = new web3.eth.Contract(RideSharingABI.abi, contractAddress);\r\n\r\n// 2. For subscribing to events (using WebSocket)\r\nconst rideSharingContractWs = new web3Ws.eth.Contract(RideSharingABI.abi, contractAddress);\r\n\r\nconsole.log(\"Transaction contract instance:\", rideSharingContract);\r\nconsole.log(\"WebSocket contract instance:\", rideSharingContractWs);\r\n\r\nexport { web3, web3Ws, rideSharingContract, rideSharingContractWs };\r\n"],"mappings":"AAAA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,cAAc,MAAM,oBAAoB,CAAC,CAAC;;AAEjD;AACA,MAAMC,IAAI,GAAG,IAAIF,IAAI,CAACG,MAAM,CAACC,QAAQ,CAAC;;AAEtC;AACA,MAAMC,UAAU,GAAG,IAAIL,IAAI,CAACM,SAAS,CAACC,iBAAiB,CAAC,qBAAqB,CAAC,CAAC,CAAC;AAChF,MAAMC,MAAM,GAAG,IAAIR,IAAI,CAACK,UAAU,CAAC;;AAEnC;AACA,MAAMI,eAAe,GAAG,4CAA4C;;AAEpE;AACA;AACA,MAAMC,mBAAmB,GAAG,IAAIR,IAAI,CAACS,GAAG,CAACC,QAAQ,CAACX,cAAc,CAACY,GAAG,EAAEJ,eAAe,CAAC;;AAEtF;AACA,MAAMK,qBAAqB,GAAG,IAAIN,MAAM,CAACG,GAAG,CAACC,QAAQ,CAACX,cAAc,CAACY,GAAG,EAAEJ,eAAe,CAAC;AAE1FM,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEN,mBAAmB,CAAC;AAClEK,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,qBAAqB,CAAC;AAElE,SAASZ,IAAI,EAAEM,MAAM,EAAEE,mBAAmB,EAAEI,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}