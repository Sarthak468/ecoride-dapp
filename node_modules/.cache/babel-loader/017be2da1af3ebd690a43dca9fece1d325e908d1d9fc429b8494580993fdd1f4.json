{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barot\\\\OneDrive\\\\Desktop\\\\EcoRide\\\\frontend\\\\src\\\\pages\\\\UserDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { web3, rideSharingContract } from \"../web3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserDashboard() {\n  _s();\n  // We define one permanent ride in state:\n  const [rides, setRides] = useState([{\n    id: \"dummy\",\n    driver: \"0x0000000000000000000000000000000000000000\",\n    source: \"Saskatoon\",\n    destination: \"Regina\",\n    seats: \"1\",\n    // 0.5 ETH in wei\n    amount: web3.utils.toWei(\"0.5\", \"ether\"),\n    amountEth: \"0.5\",\n    status: \"0\",\n    // \"Not Started\"\n    user: \"0x0000000000000000000000000000000000000000\"\n  }]);\n  const [statusMessage, setStatusMessage] = useState(\"\");\n\n  // Helper to convert numeric status to text\n  const getStatusText = status => {\n    if (status === \"0\") return \"Not Started\";\n    if (status === \"1\") return \"Ongoing\";\n    if (status === \"2\") return \"Completed\";\n    return \"Unknown\";\n  };\n\n  // This function attempts to call selectRide on-chain,\n  // but it will fail unless there's a real ride with ID \"dummy\".\n  const handleSelectRide = async (rideId, rideWei) => {\n    console.log(\"User selected ride:\", rideId, \"for wei:\", rideWei);\n    try {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const user = accounts[0];\n\n      // Attempt on-chain select\n      await rideSharingContract.methods.selectRide(rideId).send({\n        from: user,\n        value: rideWei\n      });\n      setStatusMessage(\"Ride selected & paid successfully!\");\n      // In a real scenario, you'd reload from chain here\n    } catch (error) {\n      console.error(\"Error selecting ride:\", error);\n      setStatusMessage(\"Transaction failed or canceled (or ride does not exist on-chain).\");\n    }\n  };\n\n  // We only have one ride in state, so \"availableRides\" is just that if status is \"0\"\n  const availableRides = rides.filter(ride => ride.status === \"0\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Dashboard - Available Rides\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontStyle: \"italic\"\n      },\n      children: \"This version ignores the blockchain and always shows a permanent dummy ride.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }, this), availableRides.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No rides available at the moment.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: availableRides.map(ride => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          marginBottom: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Source:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this), \" \", ride.source, \" |\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Destination:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this), \" \", ride.destination, \" |\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Seats:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this), \" \", ride.seats, \" |\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Amount:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this), \" \", ride.amountEth, \" ETH |\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this), \" \", getStatusText(ride.status)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this), ride.status === \"0\" && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectRide(ride.id, ride.amount),\n          children: \"Select & Pay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this)]\n      }, ride.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(UserDashboard, \"ws1b5Q5ymYtaGK2UfQdLiG79tMc=\");\n_c = UserDashboard;\nexport default UserDashboard;\nvar _c;\n$RefreshReg$(_c, \"UserDashboard\");","map":{"version":3,"names":["React","useState","web3","rideSharingContract","jsxDEV","_jsxDEV","UserDashboard","_s","rides","setRides","id","driver","source","destination","seats","amount","utils","toWei","amountEth","status","user","statusMessage","setStatusMessage","getStatusText","handleSelectRide","rideId","rideWei","console","log","accounts","window","ethereum","request","method","methods","selectRide","send","from","value","error","availableRides","filter","ride","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","fontStyle","length","map","marginBottom","onClick","_c","$RefreshReg$"],"sources":["C:/Users/barot/OneDrive/Desktop/EcoRide/frontend/src/pages/UserDashboard.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { web3, rideSharingContract } from \"../web3\";\r\n\r\nfunction UserDashboard() {\r\n  // We define one permanent ride in state:\r\n  const [rides, setRides] = useState([\r\n    {\r\n      id: \"dummy\",\r\n      driver: \"0x0000000000000000000000000000000000000000\",\r\n      source: \"Saskatoon\",\r\n      destination: \"Regina\",\r\n      seats: \"1\",\r\n      // 0.5 ETH in wei\r\n      amount: web3.utils.toWei(\"0.5\", \"ether\"),\r\n      amountEth: \"0.5\",\r\n      status: \"0\", // \"Not Started\"\r\n      user: \"0x0000000000000000000000000000000000000000\"\r\n    }\r\n  ]);\r\n\r\n  const [statusMessage, setStatusMessage] = useState(\"\");\r\n\r\n  // Helper to convert numeric status to text\r\n  const getStatusText = (status) => {\r\n    if (status === \"0\") return \"Not Started\";\r\n    if (status === \"1\") return \"Ongoing\";\r\n    if (status === \"2\") return \"Completed\";\r\n    return \"Unknown\";\r\n  };\r\n\r\n  // This function attempts to call selectRide on-chain,\r\n  // but it will fail unless there's a real ride with ID \"dummy\".\r\n  const handleSelectRide = async (rideId, rideWei) => {\r\n    console.log(\"User selected ride:\", rideId, \"for wei:\", rideWei);\r\n    try {\r\n      const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n      const user = accounts[0];\r\n\r\n      // Attempt on-chain select\r\n      await rideSharingContract.methods\r\n        .selectRide(rideId)\r\n        .send({ from: user, value: rideWei });\r\n\r\n      setStatusMessage(\"Ride selected & paid successfully!\");\r\n      // In a real scenario, you'd reload from chain here\r\n    } catch (error) {\r\n      console.error(\"Error selecting ride:\", error);\r\n      setStatusMessage(\"Transaction failed or canceled (or ride does not exist on-chain).\");\r\n    }\r\n  };\r\n\r\n  // We only have one ride in state, so \"availableRides\" is just that if status is \"0\"\r\n  const availableRides = rides.filter((ride) => ride.status === \"0\");\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\" }}>\r\n      <h2>User Dashboard - Available Rides</h2>\r\n      <p style={{ fontStyle: \"italic\" }}>\r\n        This version ignores the blockchain and always shows a permanent dummy ride.\r\n      </p>\r\n\r\n      {statusMessage && <p>{statusMessage}</p>}\r\n\r\n      {availableRides.length === 0 ? (\r\n        <p>No rides available at the moment.</p>\r\n      ) : (\r\n        <ul>\r\n          {availableRides.map((ride) => (\r\n            <li key={ride.id} style={{ marginBottom: \"10px\" }}>\r\n              <div>\r\n                <strong>Source:</strong> {ride.source} |{\" \"}\r\n                <strong>Destination:</strong> {ride.destination} |{\" \"}\r\n                <strong>Seats:</strong> {ride.seats} |{\" \"}\r\n                <strong>Amount:</strong> {ride.amountEth} ETH |{\" \"}\r\n                <strong>Status:</strong> {getStatusText(ride.status)}\r\n              </div>\r\n              {ride.status === \"0\" && (\r\n                <button onClick={() => handleSelectRide(ride.id, ride.amount)}>\r\n                  Select &amp; Pay\r\n                </button>\r\n              )}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n      {statusMessage && <p>{statusMessage}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}