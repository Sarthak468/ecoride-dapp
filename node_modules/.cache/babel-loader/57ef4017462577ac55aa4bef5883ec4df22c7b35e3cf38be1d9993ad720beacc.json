{"ast":null,"code":"// web3.js\nimport Web3 from \"web3\";\nimport RideSharingABI from \"./RideSharing.json\"; // The ABI from your compiled contract\n\nlet web3;\nlet rideSharingContract;\nif (window.ethereum) {\n  // Use MetaMask's injected provider for everything\n  web3 = new Web3(window.ethereum);\n\n  // Replace with your deployed contract address\n  const contractAddress = \"0x795B54B52AE2C7E26d49033Ab788F917B3DFb236\";\n  rideSharingContract = new web3.eth.Contract(RideSharingABI.abi, contractAddress);\n  console.log(\"Contract instance:\", rideSharingContract);\n} else {\n  alert(\"MetaMask not detected!\");\n}\nexport { web3, rideSharingContract };","map":{"version":3,"names":["Web3","RideSharingABI","web3","rideSharingContract","window","ethereum","contractAddress","eth","Contract","abi","console","log","alert"],"sources":["C:/Users/barot/OneDrive/Desktop/EcoRide/frontend/src/web3.js"],"sourcesContent":["// web3.js\r\nimport Web3 from \"web3\";\r\nimport RideSharingABI from \"./RideSharing.json\"; // The ABI from your compiled contract\r\n\r\nlet web3;\r\nlet rideSharingContract;\r\n\r\nif (window.ethereum) {\r\n  // Use MetaMask's injected provider for everything\r\n  web3 = new Web3(window.ethereum);\r\n\r\n  // Replace with your deployed contract address\r\n  const contractAddress = \"0x795B54B52AE2C7E26d49033Ab788F917B3DFb236\";\r\n  rideSharingContract = new web3.eth.Contract(RideSharingABI.abi, contractAddress);\r\n\r\n  console.log(\"Contract instance:\", rideSharingContract);\r\n} else {\r\n  alert(\"MetaMask not detected!\");\r\n}\r\n\r\nexport { web3, rideSharingContract };\r\n"],"mappings":"AAAA;AACA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,cAAc,MAAM,oBAAoB,CAAC,CAAC;;AAEjD,IAAIC,IAAI;AACR,IAAIC,mBAAmB;AAEvB,IAAIC,MAAM,CAACC,QAAQ,EAAE;EACnB;EACAH,IAAI,GAAG,IAAIF,IAAI,CAACI,MAAM,CAACC,QAAQ,CAAC;;EAEhC;EACA,MAAMC,eAAe,GAAG,4CAA4C;EACpEH,mBAAmB,GAAG,IAAID,IAAI,CAACK,GAAG,CAACC,QAAQ,CAACP,cAAc,CAACQ,GAAG,EAAEH,eAAe,CAAC;EAEhFI,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAER,mBAAmB,CAAC;AACxD,CAAC,MAAM;EACLS,KAAK,CAAC,wBAAwB,CAAC;AACjC;AAEA,SAASV,IAAI,EAAEC,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}