{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barot\\\\OneDrive\\\\Desktop\\\\EcoRide\\\\frontend\\\\src\\\\pages\\\\UserDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { web3, rideSharingContract } from \"../web3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserDashboard() {\n  _s();\n  const [rides, setRides] = useState([]);\n  const [statusMessage, setStatusMessage] = useState(\"\");\n\n  // Convert numeric status to text\n  const getStatusText = status => {\n    const numericStatus = parseInt(status, 10);\n    if (numericStatus === 0) return \"Not Started\";\n    if (numericStatus === 1) return \"Ongoing\";\n    if (numericStatus === 2) return \"Completed\";\n    return \"Unknown\";\n  };\n\n  // Load only the single latest ride (highest ride ID) or a fallback dummy\n  const loadRides = async () => {\n    console.log(\"Inside loadRides in UserDashboard\");\n    try {\n      // Ensure user has connected MetaMask\n      await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Requesting rideCount in UserDashboard...\");\n      const rideCount = await rideSharingContract.methods.rideCount().call();\n      console.log(\"rideCount from contract (UserDashboard):\", rideCount);\n\n      // If no rides exist on-chain, show the fallback dummy ride\n      if (parseInt(rideCount, 10) === 0) {\n        console.log(\"No rides found on-chain; adding dummy ride.\");\n        const dummyRide = {\n          id: \"dummy\",\n          driver: \"0x0000000000000000000000000000000000000000\",\n          source: \"Saskatoon\",\n          destination: \"Regina\",\n          seats: \"1\",\n          amount: web3.utils.toWei(\"0.5\", \"ether\"),\n          amountEth: \"0.5\",\n          status: \"0\",\n          // Not Started\n          user: \"0x0000000000000000000000000000000000000000\"\n        };\n        setRides([dummyRide]);\n      } else {\n        // Fetch only the ride with ID = rideCount (the latest ride)\n        const latestId = parseInt(rideCount, 10);\n        console.log(\"Fetching only the latest ride with ID =\", latestId);\n        const ride = await rideSharingContract.methods.rides(latestId).call();\n\n        // Convert the amount from wei to ETH\n        ride.amountEth = web3.utils.fromWei(ride.amount, \"ether\");\n        console.log(\"Latest ride data:\", ride);\n        setRides([ride]); // We store only this single ride in state\n      }\n    } catch (error) {\n      console.error(\"Error loading rides in UserDashboard:\", error);\n      alert(\"Error in loadRides (UserDashboard): \" + error.message);\n    }\n  };\n  useEffect(() => {\n    loadRides();\n    // Poll every 2 seconds so newly proposed rides appear quickly\n    const interval = setInterval(loadRides, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  const handleSelectRide = async (rideId, rideWei) => {\n    try {\n      console.log(\"Selecting ride:\", rideId, \"for wei:\", rideWei);\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const user = accounts[0];\n      await rideSharingContract.methods.selectRide(rideId).send({\n        from: user,\n        value: rideWei\n      });\n      setStatusMessage(\"Ride selected & paid successfully!\");\n      loadRides();\n    } catch (error) {\n      console.error(\"Error selecting ride:\", error);\n      setStatusMessage(\"Transaction failed or canceled.\");\n    }\n  };\n\n  // We only have one ride in the array, so we check if it's Not Started\n  // Then display \"Select & Pay\" if so\n  const ride = rides.length > 0 ? rides[0] : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Dashboard - Latest Ride\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadRides,\n      children: \"Refresh Rides\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }, this), !ride ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No ride data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Source:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), \" \", ride.source, \" |\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Destination:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), \" \", ride.destination, \" |\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Seats:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), \" \", ride.seats, \" |\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Amount:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), \" \", ride.amountEth, \" ETH |\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), \" \", getStatusText(ride.status), parseInt(ride.status, 10) === 0 && ride.id !== \"dummy\" && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginLeft: \"20px\"\n        },\n        onClick: () => handleSelectRide(ride.id, ride.amount),\n        children: \"Select & Pay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this), parseInt(ride.status, 10) === 0 && ride.id === \"dummy\" && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginLeft: \"20px\"\n        },\n        onClick: () => alert(\"This is a dummy ride. The real on-chain ride will appear once proposed in Driver Dashboard.\"),\n        children: \"Dummy Ride\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(UserDashboard, \"oEWmRHypxXwWF65qr7S/Q6Uq+3c=\");\n_c = UserDashboard;\nexport default UserDashboard;\nvar _c;\n$RefreshReg$(_c, \"UserDashboard\");","map":{"version":3,"names":["React","useState","useEffect","web3","rideSharingContract","jsxDEV","_jsxDEV","UserDashboard","_s","rides","setRides","statusMessage","setStatusMessage","getStatusText","status","numericStatus","parseInt","loadRides","console","log","window","ethereum","request","method","rideCount","methods","call","dummyRide","id","driver","source","destination","seats","amount","utils","toWei","amountEth","user","latestId","ride","fromWei","error","alert","message","interval","setInterval","clearInterval","handleSelectRide","rideId","rideWei","accounts","selectRide","send","from","value","length","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginTop","marginLeft","_c","$RefreshReg$"],"sources":["C:/Users/barot/OneDrive/Desktop/EcoRide/frontend/src/pages/UserDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { web3, rideSharingContract } from \"../web3\";\r\n\r\nfunction UserDashboard() {\r\n  const [rides, setRides] = useState([]);\r\n  const [statusMessage, setStatusMessage] = useState(\"\");\r\n\r\n  // Convert numeric status to text\r\n  const getStatusText = (status) => {\r\n    const numericStatus = parseInt(status, 10);\r\n    if (numericStatus === 0) return \"Not Started\";\r\n    if (numericStatus === 1) return \"Ongoing\";\r\n    if (numericStatus === 2) return \"Completed\";\r\n    return \"Unknown\";\r\n  };\r\n\r\n  // Load only the single latest ride (highest ride ID) or a fallback dummy\r\n  const loadRides = async () => {\r\n    console.log(\"Inside loadRides in UserDashboard\");\r\n    try {\r\n      // Ensure user has connected MetaMask\r\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n      console.log(\"Requesting rideCount in UserDashboard...\");\r\n      const rideCount = await rideSharingContract.methods.rideCount().call();\r\n      console.log(\"rideCount from contract (UserDashboard):\", rideCount);\r\n\r\n      // If no rides exist on-chain, show the fallback dummy ride\r\n      if (parseInt(rideCount, 10) === 0) {\r\n        console.log(\"No rides found on-chain; adding dummy ride.\");\r\n        const dummyRide = {\r\n          id: \"dummy\",\r\n          driver: \"0x0000000000000000000000000000000000000000\",\r\n          source: \"Saskatoon\",\r\n          destination: \"Regina\",\r\n          seats: \"1\",\r\n          amount: web3.utils.toWei(\"0.5\", \"ether\"),\r\n          amountEth: \"0.5\",\r\n          status: \"0\", // Not Started\r\n          user: \"0x0000000000000000000000000000000000000000\"\r\n        };\r\n        setRides([dummyRide]);\r\n      } else {\r\n        // Fetch only the ride with ID = rideCount (the latest ride)\r\n        const latestId = parseInt(rideCount, 10);\r\n        console.log(\"Fetching only the latest ride with ID =\", latestId);\r\n        const ride = await rideSharingContract.methods.rides(latestId).call();\r\n\r\n        // Convert the amount from wei to ETH\r\n        ride.amountEth = web3.utils.fromWei(ride.amount, \"ether\");\r\n        console.log(\"Latest ride data:\", ride);\r\n\r\n        setRides([ride]); // We store only this single ride in state\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading rides in UserDashboard:\", error);\r\n      alert(\"Error in loadRides (UserDashboard): \" + error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadRides();\r\n    // Poll every 2 seconds so newly proposed rides appear quickly\r\n    const interval = setInterval(loadRides, 2000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const handleSelectRide = async (rideId, rideWei) => {\r\n    try {\r\n      console.log(\"Selecting ride:\", rideId, \"for wei:\", rideWei);\r\n      const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n      const user = accounts[0];\r\n\r\n      await rideSharingContract.methods\r\n        .selectRide(rideId)\r\n        .send({ from: user, value: rideWei });\r\n\r\n      setStatusMessage(\"Ride selected & paid successfully!\");\r\n      loadRides();\r\n    } catch (error) {\r\n      console.error(\"Error selecting ride:\", error);\r\n      setStatusMessage(\"Transaction failed or canceled.\");\r\n    }\r\n  };\r\n\r\n  // We only have one ride in the array, so we check if it's Not Started\r\n  // Then display \"Select & Pay\" if so\r\n  const ride = rides.length > 0 ? rides[0] : null;\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\" }}>\r\n      <h2>User Dashboard - Latest Ride</h2>\r\n      <button onClick={loadRides}>Refresh Rides</button>\r\n      {statusMessage && <p>{statusMessage}</p>}\r\n\r\n      {!ride ? (\r\n        <p>No ride data available.</p>\r\n      ) : (\r\n        <div style={{ marginTop: \"20px\" }}>\r\n          <strong>Source:</strong> {ride.source} |{\" \"}\r\n          <strong>Destination:</strong> {ride.destination} |{\" \"}\r\n          <strong>Seats:</strong> {ride.seats} |{\" \"}\r\n          <strong>Amount:</strong> {ride.amountEth} ETH |{\" \"}\r\n          <strong>Status:</strong> {getStatusText(ride.status)}\r\n\r\n          {/* Show \"Select & Pay\" only if status=0 (Not Started) and it's not the dummy ride */}\r\n          {parseInt(ride.status, 10) === 0 && ride.id !== \"dummy\" && (\r\n            <button\r\n              style={{ marginLeft: \"20px\" }}\r\n              onClick={() => handleSelectRide(ride.id, ride.amount)}\r\n            >\r\n              Select & Pay\r\n            </button>\r\n          )}\r\n\r\n          {/* If it's the dummy ride, or status != 0, we do nothing */}\r\n          {parseInt(ride.status, 10) === 0 && ride.id === \"dummy\" && (\r\n            <button\r\n              style={{ marginLeft: \"20px\" }}\r\n              onClick={() =>\r\n                alert(\"This is a dummy ride. The real on-chain ride will appear once proposed in Driver Dashboard.\")\r\n              }\r\n            >\r\n              Dummy Ride\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}